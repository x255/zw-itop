<?php
//
// File generated by ... on the 2024-10-22T13:54:27+0200
// Please do not edit manually
//

/**
 * Classes and menus for authent-token (version 2.1.3)
 *
 * @author      iTop compiler
 * @license     http://opensource.org/licenses/AGPL-3.0
 */



class PersonalToken extends AbstractPersonalToken
{
	public static function Init()
	{
		$aParams = array(			'category' => 'addon/authentication,grant_by_profile',
			'key_type' => 'autoincrement',
			'name_attcode' => array('application'),
			'image_attcode' => '',
			'state_attcode' => '',
			'reconc_keys' => array('application', 'user_id'),
			'db_table' => 'priv_personal_token',
			'db_key_field' => 'id',
			'db_finalclass_field' => '',
			'style' =>  new ormStyle(null, null, null, null, null, null),);
		MetaModel::Init_Params($aParams);
		MetaModel::Init_InheritAttributes();
		MetaModel::Init_AddAttribute(new AttributeExternalKey("user_id", array("targetclass"=>'User', "allowed_values"=>null, "sql"=>'user_id', "is_null_allowed"=>false, "on_target_delete"=>DEL_AUTO, "allow_target_creation"=>false, "display_style"=>'list', "create_temporary_object"=>false, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeExternalField("org_id", array("extkey_attcode"=>'user_id', "target_attcode"=>'org_id', "allowed_values"=>null, "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeOneWayPassword("auth_token", array("sql"=>'auth_token', "is_null_allowed"=>false, "default_value"=>'', "allowed_values"=>null, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeString("application", array("sql"=>'application', "is_null_allowed"=>false, "default_value"=>'', "allowed_values"=>null, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeEnumSet("scope", array("possible_values"=>new ValueSetEnumPadded("REST/JSON,Synchro,Import,Export"), "sql"=>'scope', "is_null_allowed"=>true, "max_items"=>12, "allowed_values"=>null, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeDateTime("expiration_date", array("sql"=>'expiration_date', "is_null_allowed"=>true, "default_value"=>'', "allowed_values"=>null, "depends_on"=>array(), "always_load_in_tables"=>false, "tracking_level"=>ATTRIBUTE_TRACKING_NONE)));
		MetaModel::Init_AddAttribute(new AttributeInteger("use_count", array("sql"=>'use_count', "is_null_allowed"=>true, "default_value"=>'0', "allowed_values"=>null, "depends_on"=>array(), "always_load_in_tables"=>false, "tracking_level"=>ATTRIBUTE_TRACKING_NONE)));
		MetaModel::Init_AddAttribute(new AttributeDateTime("last_use_date", array("sql"=>'last_use_date', "is_null_allowed"=>true, "default_value"=>'', "allowed_values"=>null, "depends_on"=>array(), "always_load_in_tables"=>false)));



		MetaModel::Init_SetZListItems('details', array (
  0 => 'user_id',
  1 => 'org_id',
  2 => 'application',
  3 => 'scope',
  4 => 'expiration_date',
  5 => 'use_count',
  6 => 'last_use_date',
));
		MetaModel::Init_SetZListItems('standard_search', array (
  0 => 'user_id',
  1 => 'application',
  2 => 'scope',
  3 => 'expiration_date',
));
		MetaModel::Init_SetZListItems('default_search', array (
  0 => 'application',
  1 => 'user_id',
  2 => 'org_id',
  3 => 'expiration_date',
));
		MetaModel::Init_SetZListItems('list', array (
  0 => 'user_id',
  1 => 'application',
  2 => 'scope',
  3 => 'expiration_date',
));
;
	}



   	public function GetAttributeFlags($sAttCode, &$aReasons = array(), $sTargetState = '')
	{
		// This function is invoked when the object is EDITED on the Console
		// It is called for each and every field of the object,
		// but we just want to change the behavior for a single field
		if ($sAttCode == 'use_count' || $sAttCode == 'last_use_date')
		{
			// Combine the new Flag with those impose by a parent class
			return(OPT_ATT_READONLY | parent::GetAttributeFlags($sAttCode, $aReasons, $sTargetState));
		}
		return parent::GetAttributeFlags($sAttCode, $aReasons, $sTargetState);
	}


   	public function GetInitialStateAttributeFlags($sAttCode, &$aReasons = array())
{
    // This function is invoked when the object is CREATED on the Console
    // It is called for each and every field of the object,
    // but we just want to change the behavior for a single field
		if ($sAttCode == 'use_count' || $sAttCode == 'last_use_date')
    {
        // Combine the new Flag with those imposed by a parent class
        return(OPT_ATT_READONLY | parent::GetInitialStateAttributeFlags($sAttCode, $aReasons));
    }
    // For other fields ask the parent class to do the job
    return parent::GetInitialStateAttributeFlags($sAttCode, $aReasons);
}

}


class UserToken extends AbstractApplicationToken
{
	public static function Init()
	{
		$aParams = array(			'category' => 'addon/authentication,grant_by_profile',
			'key_type' => 'autoincrement',
			'name_attcode' => array('login'),
			'image_attcode' => '',
			'state_attcode' => '',
			'reconc_keys' => array(),
			'db_table' => 'priv_user_token',
			'db_key_field' => 'id',
			'db_finalclass_field' => '',
			'style' =>  new ormStyle(null, null, null, null, null, null),);
		MetaModel::Init_Params($aParams);
		MetaModel::Init_InheritAttributes();
		MetaModel::Init_AddAttribute(new AttributeOneWayPassword("auth_token", array("sql"=>'auth_token', "is_null_allowed"=>false, "default_value"=>'', "allowed_values"=>null, "depends_on"=>array(), "always_load_in_tables"=>false)));



		MetaModel::Init_SetZListItems('details', array (
  'col:col1' => 
  array (
    'fieldset:User:info' => 
    array (
      0 => 'contactid',
      1 => 'org_id',
      2 => 'email',
      3 => 'login',
      4 => 'language',
      5 => 'status',
    ),
  ),
  'col:col2' => 
  array (
    'fieldset:User:profiles' => 
    array (
      0 => 'profile_list',
    ),
  ),
  0 => 'allowed_org_list',
  1 => 'log',
));
		MetaModel::Init_SetZListItems('list', array (
  0 => 'contactid',
  1 => 'org_id',
  2 => 'email',
  3 => 'status',
));
;
	}


}
<?php
//
// File generated by ... on the 2024-10-22T13:54:27+0200
// Please do not edit manually
//

/**
 * Classes and menus for itop-oauth-client (version 3.1.1)
 *
 * @author      iTop compiler
 * @license     http://opensource.org/licenses/AGPL-3.0
 */



abstract class OAuthClient extends cmdbAbstractObject
{
	public static function Init()
	{
		$aParams = array(			'category' => 'grant_by_profile,application',
			'key_type' => 'autoincrement',
			'name_attcode' => array('provider', 'name'),
			'image_attcode' => '',
			'state_attcode' => '',
			'reconc_keys' => array('provider', 'name'),
			'db_table' => 'priv_oauth_client',
			'db_key_field' => 'id',
			'db_finalclass_field' => 'finalclass',
			'style' =>  new ormStyle(null, null, null, null, null, null),);
		MetaModel::Init_Params($aParams);
		MetaModel::Init_InheritAttributes();
		MetaModel::Init_AddAttribute(new AttributeString("provider", array("sql"=>'provider', "is_null_allowed"=>false, "default_value"=>'', "allowed_values"=>null, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeString("name", array("sql"=>'name', "is_null_allowed"=>false, "default_value"=>'', "allowed_values"=>null, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeEnum("status", array("allowed_values"=>new ValueSetEnum("active,inactive" ), "styled_values"=>['active' =>  new ormStyle('ibo-dm-enum--OAuthClient-status-active', 'ibo-dm-enum-alt--OAuthClient-status-active', 'var(--ibo-dm-enum--OAuthClient-status-active--main-color)', 'var(--ibo-dm-enum--OAuthClient-status-active--complementary-color)', null, null),'inactive' =>  new ormStyle('ibo-dm-enum--OAuthClient-status-inactive', 'ibo-dm-enum-alt--OAuthClient-status-inactive', 'var(--ibo-dm-enum--OAuthClient-status-inactive--main-color)', 'var(--ibo-dm-enum--OAuthClient-status-inactive--complementary-color)', null, null)], "display_style"=>'list', "sql"=>'status', "default_value"=>'inactive', "is_null_allowed"=>false, "depends_on"=>array(), "always_load_in_tables"=>true)));
		MetaModel::Init_AddAttribute(new AttributeText("description", array("sql"=>'description', "is_null_allowed"=>true, "default_value"=>'', "allowed_values"=>null, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeString("client_id", array("sql"=>'client_id', "is_null_allowed"=>false, "default_value"=>'', "allowed_values"=>null, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributePassword("client_secret", array("sql"=>'client_secret', "is_null_allowed"=>false, "default_value"=>'', "allowed_values"=>null, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeText("refresh_token", array("sql"=>'refresh_token', "is_null_allowed"=>true, "default_value"=>'', "allowed_values"=>null, "depends_on"=>array(), "always_load_in_tables"=>false, "tracking_level"=>ATTRIBUTE_TRACKING_NONE)));
		MetaModel::Init_AddAttribute(new AttributeDateTime("refresh_token_expiration", array("sql"=>'refresh_token_expiration', "is_null_allowed"=>true, "default_value"=>'', "allowed_values"=>null, "depends_on"=>array(), "always_load_in_tables"=>false, "tracking_level"=>ATTRIBUTE_TRACKING_NONE)));
		MetaModel::Init_AddAttribute(new AttributeText("token", array("sql"=>'token', "is_null_allowed"=>true, "default_value"=>'', "allowed_values"=>null, "depends_on"=>array(), "always_load_in_tables"=>false, "tracking_level"=>ATTRIBUTE_TRACKING_NONE)));
		MetaModel::Init_AddAttribute(new AttributeDateTime("token_expiration", array("sql"=>'token_expiration', "is_null_allowed"=>true, "default_value"=>'', "allowed_values"=>null, "depends_on"=>array(), "always_load_in_tables"=>false, "tracking_level"=>ATTRIBUTE_TRACKING_NONE)));
		MetaModel::Init_AddAttribute(new AttributeURL("redirect_url", array("target"=>'_blank', "sql"=>'redirect_url', "default_value"=>'', "is_null_allowed"=>true, "allowed_values"=>null, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeLinkedSet("mailbox_list", array("linked_class"=>'MailInboxOAuth', "ext_key_to_me"=>'oauth_client_id', "count_min"=>0, "count_max"=>0, "display_style"=>'', "allowed_values"=>null, "with_php_constraint"=>false, "with_php_computation"=>false, "depends_on"=>array(), "always_load_in_tables"=>false)));



		MetaModel::Init_SetZListItems('details', array (
  0 => 'name',
  1 => 'description',
  2 => 'provider',
  3 => 'redirect_url',
  4 => 'client_id',
  5 => 'client_secret',
  6 => 'mailbox_list',
));
		MetaModel::Init_SetZListItems('standard_search', array (
  0 => 'name',
  1 => 'provider',
));
		MetaModel::Init_SetZListItems('default_search', array (
  0 => 'name',
  1 => 'provider',
));
		MetaModel::Init_SetZListItems('list', array (
  0 => 'status',
  1 => 'provider',
));
;
	}




  public function DisplayBareHeader(WebPage $oPage, $bEditMode = false)
  {
        $aHeaderBlocks = parent::DisplayBareHeader($oPage, $bEditMode);
        $aTags = [];
        if (!$bEditMode) {
          $oConfig = utils::GetConfig();
          if ($this->Get('status') == 'inactive') {
            $sLabel = Dict::S('itop-oauth-client:Message:MissingToken');
            $sTitle = '';
            $aTags['oauth-message'] = ['title' => $sTitle, 'css_classes' => 'ibo-object-details--tag--oauth-message', 'decoration_classes' => 'fas fa-exclamation-triangle', 'label' => $sLabel];
          } elseif ($this->Get('used_for_smtp') == 'yes' && $oConfig->Get('email_transport_smtp.username') == $this->Get('name')) {
            $sLabel = Dict::S('itop-oauth-client:UsedForSMTP');
            $sTestLabel = Dict::S('itop-oauth-client:TestSMTP');
            $sTestURL = utils::GetAbsoluteUrlAppRoot().'setup/email.test.php';
            $sLabel = Dict::S('itop-oauth-client:UsedForSMTP')." <a href='$sTestURL' target='_blank'>$sTestLabel</a>";
            $sTitle = '';
            $aTags['oauth-message'] = ['title' => $sTitle, 'css_classes' => 'ibo-object-details--tag--oauth-message', 'decoration_classes' => 'fas fa-envelope', 'label' => $sLabel];
          }
        }
        foreach ($aTags as $sIconId => $aIconData) {
          $aHeaderBlocks['subtitle'][static::HEADER_BLOCKS_SUBTITLE_TAG_PREFIX.$sIconId] = new Combodo\iTop\Application\UI\Base\Component\Html\Html(<<<HTML
    <span id="{$sIconId}" class="ibo-object-details--tag {$aIconData['css_classes']}"><span class="ibo-object-details--tag-icon"><span class="{$aIconData['decoration_classes']}"></span></span>{$aIconData['label']}</span>
HTML
          );
        }

        return $aHeaderBlocks;
   }
        



  public function GetAttributeFlags($sAttCode, &$aReasons = array(), $sTargetState = '')
  {
    if ($sAttCode == 'status') {
      return OPT_ATT_READONLY;
    }

    return parent::GetAttributeFlags($sAttCode, $aReasons, $sTargetState);
  }
        



  public function GetInitialStateAttributeFlags($sAttCode, &$aReasons = array())
  {
    if ($sAttCode == 'status') {
      return OPT_ATT_READONLY;
    }

    return parent::GetInitialStateAttributeFlags($sAttCode, $aReasons);
  }
        



  public function GetDefaultMailServer()
  {
      return 'imap.'.$this->Get('provider').'.com';
  }
            



  public function GetDefaultMailServerPort()
  {
      return 993;
  }
            



    public function GetAccessToken()
    {
        if ($this->Get('status') == 'active') {
          return new \League\OAuth2\Client\Token\AccessToken([
            'access_token'  => $this->Get('token'),
            'expires_in'    => date_format(new DateTime($this->Get('token_expiration')), 'U') - time(),
            'refresh_token' => $this->Get('refresh_token'),
            'token_type'    => 'Bearer',
          ]);
        }
        return null;
    }
            



    public function SetAccessToken(\League\OAuth2\Client\Token\AccessTokenInterface $oAccessToken)
    {
        $this->Set('token', $oAccessToken->getToken());
        $this->Set('token_expiration', date(AttributeDateTime::GetSQLFormat(), $oAccessToken->getExpires()));
        if (!empty($oAccessToken->getRefreshToken())) {
            $this->Set('refresh_token', $oAccessToken->getRefreshToken());
        }
        $this->Set('status', 'active');
        $this->AllowWrite();
        $this->DBUpdate();
    }
            

}


class OAuthClientAzure extends OAuthClient
{
	public static function Init()
	{
		$aParams = array(			'category' => 'grant_by_profile,application',
			'key_type' => 'autoincrement',
			'name_attcode' => array('provider', 'name'),
			'image_attcode' => '',
			'state_attcode' => '',
			'reconc_keys' => array('provider', 'name'),
			'db_table' => 'priv_oauth_client_azure',
			'db_key_field' => 'id',
			'db_finalclass_field' => '',
			'style' =>  new ormStyle(null, null, null, null, null, null),
			'uniqueness_rules' => array (
  'server' => 
  array (
    'attributes' => 
    array (
      0 => 'provider',
      1 => 'client_id',
    ),
    'filter' => NULL,
    'disabled' => NULL,
    'is_blocking' => true,
  ),
),);
		MetaModel::Init_Params($aParams);
		MetaModel::Init_InheritAttributes();
		MetaModel::Init_AddAttribute(new AttributeEnumSet("scope", array("possible_values"=>new ValueSetEnumPadded("SMTP,IMAP"), "sql"=>'scope', "is_null_allowed"=>true, "max_items"=>12, "allowed_values"=>null, "depends_on"=>array(), "always_load_in_tables"=>true)));
		MetaModel::Init_AddAttribute(new AttributeString("advanced_scope", array("sql"=>'advanced_scope', "is_null_allowed"=>true, "default_value"=>'', "allowed_values"=>null, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeEnum("used_scope", array("allowed_values"=>new ValueSetEnum("advanced,simple" ), "display_style"=>'list', "sql"=>'used_scope', "default_value"=>'simple', "is_null_allowed"=>false, "depends_on"=>array('scope', 'advanced_scope'), "always_load_in_tables"=>true)));
		MetaModel::Init_AddAttribute(new AttributeEnum("used_for_smtp", array("allowed_values"=>new ValueSetEnum("no,yes" ), "display_style"=>'list', "sql"=>'used_for_smtp', "default_value"=>'no', "is_null_allowed"=>true, "depends_on"=>array(), "always_load_in_tables"=>true)));



		MetaModel::Init_SetZListItems('details', array (
  'col:col1' => 
  array (
    'fieldset:OAuthClient:baseinfo' => 
    array (
      0 => 'name',
      1 => 'status',
      2 => 'description',
      3 => 'provider',
      4 => 'redirect_url',
      5 => 'client_id',
      6 => 'client_secret',
      7 => 'mailbox_list',
    ),
  ),
  'col:col2' => 
  array (
    'fieldset:OAuthClient:scope' => 
    array (
      0 => 'used_scope',
      1 => 'scope',
      2 => 'advanced_scope',
      3 => 'used_for_smtp',
    ),
  ),
));
		MetaModel::Init_SetZListItems('list', array (
  0 => 'provider',
  1 => 'status',
));
;
	}




  public function PrefillCreationForm(&$aContextParam)
  {
    $this->Set('provider', 'Azure');
    $this->Set('redirect_url', Combodo\iTop\Core\Authentication\Client\OAuth\OAuthClientProviderFactory::GetRedirectUri());
    $this->Set('scope', 'SMTP, IMAP');

    parent::PrefillCreationForm($aContextParam);
  }
            


	public function DoCheckToWrite()
	{
		parent::DoCheckToWrite();

		$aChanges = $this->ListChanges();
		if (array_key_exists('name', $aChanges) || array_key_exists('used_for_smtp', $aChanges)) {
			$sNewName = $this->Get('name');
			$sNewUseForSMTP = $this->Get('used_for_smtp');
			if ($sNewUseForSMTP == 'yes') {
        $oSearch = DBObjectSearch::FromOQL_AllData("SELECT OAuthClientGoogle WHERE name = :newname AND used_for_smtp = :newuseforsmtp AND id != :id UNION SELECT OAuthClientAzure WHERE name = :newname AND used_for_smtp = :newuseforsmtp AND id != :id");
        $oSet = new DBObjectSet($oSearch, array(), ['id' => $this->GetKey(), 'newname' => $sNewName, 'newuseforsmtp' => $sNewUseForSMTP]);
        if ($oSet->Count() > 0) {
            $this->m_aCheckIssues[] = Dict::Format('OAuthClient:Name/UseForSMTPMustBeUnique', $sNewName, $sNewUseForSMTP);
        }
			}
		}
	}	



  public function ComputeValues()
  {
    parent::ComputeValues();
    if (empty($this->Get('provider'))) {
      $this->Set('provider', 'Azure');
    }
    if (empty($this->Get('redirect_url'))) {
      $this->Set('redirect_url', Combodo\iTop\Core\Authentication\Client\OAuth\OAuthClientProviderFactory::GetRedirectUri());
    }
    if (empty($this->Get('advanced_scope'))) {
		    $this->Set('used_scope', 'simple');
		    if (count($this->Get('scope')->GetValues()) == 0) {
			      $this->Set('scope', 'SMTP, IMAP');
		    }
		} else {
		    $this->Set('used_scope', 'advanced');
		    $this->Set('scope', '');
		}
    $aChanges = $this->ListChanges();
    if (array_key_exists('client_id', $aChanges) || array_key_exists('client_secret', $aChanges) || array_key_exists('redirect_url', $aChanges)) {
        $sMessage = Dict::S('itop-oauth-client:Message:RegenerateToken');
        self::SetSessionMessage(get_class($this), $this->GetKey(), 'RegenerateToken', $sMessage, 'info', 1);
        $this->Set('status', 'inactive');
    }
  }
            



  public function GetAttributeFlags($sAttCode, &$aReasons = array(), $sTargetState = '')
  {
    switch ($sAttCode) {
        case 'provider':
        case 'used_scope':
            return OPT_ATT_READONLY;
    }

    return parent::GetAttributeFlags($sAttCode, $aReasons, $sTargetState);
  }
            



  public function GetInitialStateAttributeFlags($sAttCode, &$aReasons = array())
  {
    switch ($sAttCode) {
        case 'provider':
        case 'used_scope':
            return OPT_ATT_READONLY;
    }

    return parent::GetInitialStateAttributeFlags($sAttCode, $aReasons);
  }
            



  public function GetDefaultMailServer()
  {
    return 'outlook.office365.com';
  }
            



  public function GetScope()
  {
    if (!empty($this->Get('advanced_scope'))) {
        return $this->Get('advanced_scope');
    }
    $aScopes = $this->Get('scope')->GetValues();
    $aRawScopes = ['offline_access'];
    foreach ($aScopes as $sScope) {
        switch ($sScope) {
            case 'SMTP':
                $aRawScopes[] = 'https://outlook.office.com/SMTP.Send';
                break;

            case 'IMAP':
                $aRawScopes[] = 'https://outlook.office.com/IMAP.AccessAsUser.All';
                break;
        }
    }
    return implode(' ', $aRawScopes);
  }
            

}


class OAuthClientGoogle extends OAuthClient
{
	public static function Init()
	{
		$aParams = array(			'category' => 'grant_by_profile,application',
			'key_type' => 'autoincrement',
			'name_attcode' => array('provider', 'name'),
			'image_attcode' => '',
			'state_attcode' => '',
			'reconc_keys' => array('provider', 'name'),
			'db_table' => 'priv_oauth_client_google',
			'db_key_field' => 'id',
			'db_finalclass_field' => '',
			'style' =>  new ormStyle(null, null, null, null, null, null),
			'uniqueness_rules' => array (
  'server' => 
  array (
    'attributes' => 
    array (
      0 => 'provider',
      1 => 'client_id',
    ),
    'filter' => NULL,
    'disabled' => NULL,
    'is_blocking' => true,
  ),
),);
		MetaModel::Init_Params($aParams);
		MetaModel::Init_InheritAttributes();
		MetaModel::Init_AddAttribute(new AttributeEnumSet("scope", array("possible_values"=>new ValueSetEnumPadded("SMTP,IMAP"), "sql"=>'scope', "is_null_allowed"=>true, "max_items"=>12, "allowed_values"=>null, "depends_on"=>array(), "always_load_in_tables"=>true)));
		MetaModel::Init_AddAttribute(new AttributeString("advanced_scope", array("sql"=>'advanced_scope', "is_null_allowed"=>true, "default_value"=>'', "allowed_values"=>null, "depends_on"=>array(), "always_load_in_tables"=>false)));
		MetaModel::Init_AddAttribute(new AttributeEnum("used_scope", array("allowed_values"=>new ValueSetEnum("advanced,simple" ), "display_style"=>'list', "sql"=>'used_scope', "default_value"=>'simple', "is_null_allowed"=>false, "depends_on"=>array('scope', 'advanced_scope'), "always_load_in_tables"=>true)));
		MetaModel::Init_AddAttribute(new AttributeEnum("used_for_smtp", array("allowed_values"=>new ValueSetEnum("no,yes" ), "display_style"=>'list', "sql"=>'used_for_smtp', "default_value"=>'no', "is_null_allowed"=>true, "depends_on"=>array(), "always_load_in_tables"=>true)));



		MetaModel::Init_SetZListItems('details', array (
  'col:col1' => 
  array (
    'fieldset:OAuthClient:baseinfo' => 
    array (
      0 => 'name',
      1 => 'status',
      2 => 'description',
      3 => 'provider',
      4 => 'redirect_url',
      5 => 'client_id',
      6 => 'client_secret',
      7 => 'mailbox_list',
    ),
  ),
  'col:col2' => 
  array (
    'fieldset:OAuthClient:scope' => 
    array (
      0 => 'used_scope',
      1 => 'scope',
      2 => 'advanced_scope',
      3 => 'used_for_smtp',
    ),
  ),
));
		MetaModel::Init_SetZListItems('list', array (
  0 => 'provider',
  1 => 'status',
));
;
	}




	public function PrefillCreationForm(&$aContextParam)
	{
		$this->Set('provider', 'Google');
		$this->Set('redirect_url', Combodo\iTop\Core\Authentication\Client\OAuth\OAuthClientProviderFactory::GetRedirectUri());
    $this->Set('scope', 'SMTP, IMAP');

		parent::PrefillCreationForm($aContextParam);
	}
            


	public function DoCheckToWrite()
	{
		parent::DoCheckToWrite();

		$aChanges = $this->ListChanges();
		if (array_key_exists('name', $aChanges) || array_key_exists('used_for_smtp', $aChanges))
		{
			$sNewName = $this->Get('name');
			$sNewUseForSMTP = $this->Get('used_for_smtp');
			if ($sNewUseForSMTP == 'yes') {
        $oSearch = DBObjectSearch::FromOQL_AllData("SELECT OAuthClientGoogle WHERE name = :newname AND used_for_smtp = :newuseforsmtp AND id != :id UNION SELECT OAuthClientAzure WHERE name = :newname AND used_for_smtp = :newuseforsmtp AND id != :id");
        $oSet = new DBObjectSet($oSearch, array(), ['id' => $this->GetKey(), 'newname' => $sNewName, 'newuseforsmtp' => $sNewUseForSMTP]);
        if ($oSet->Count() > 0)
        {
            $this->m_aCheckIssues[] = Dict::Format('OAuthClient:Name/UseForSMTPMustBeUnique', $sNewName, $sNewUseForSMTP);
        }
			}
		}
	}	



	public function ComputeValues()
	{
		parent::ComputeValues();
		if (empty($this->Get('provider'))) {
			$this->Set('provider', 'Google');
		}
		if (empty($this->Get('redirect_url'))) {
			$this->Set('redirect_url', Combodo\iTop\Core\Authentication\Client\OAuth\OAuthClientProviderFactory::GetRedirectUri());
		}
		if (empty($this->Get('advanced_scope'))) {
		    $this->Set('used_scope', 'simple');
		    if (count($this->Get('scope')->GetValues()) == 0) {
			      $this->Set('scope', 'SMTP, IMAP');
		    }
		} else {
		    $this->Set('used_scope', 'advanced');
		    $this->Set('scope', '');
		}
    $aChanges = $this->ListChanges();
    if (array_key_exists('client_id', $aChanges) || array_key_exists('client_secret', $aChanges) || array_key_exists('redirect_url', $aChanges)) {
        $sMessage = Dict::S('itop-oauth-client:Message:RegenerateToken');
        self::SetSessionMessage(get_class($this), $this->GetKey(), 'RegenerateToken', $sMessage, 'info', 1);
        $this->Set('status', 'inactive');
    }
	}
            



	public function GetAttributeFlags($sAttCode, &$aReasons = array(), $sTargetState = '')
	{
    switch ($sAttCode) {
        case 'provider':
        case 'used_scope':
            return OPT_ATT_READONLY;
    }

		return parent::GetAttributeFlags($sAttCode, $aReasons, $sTargetState);
	}
            



	public function GetInitialStateAttributeFlags($sAttCode, &$aReasons = array())
	{
    switch ($sAttCode) {
        case 'provider':
        case 'used_scope':
            return OPT_ATT_READONLY;
    }

		return parent::GetInitialStateAttributeFlags($sAttCode, $aReasons);
	}
            



	public function GetDefaultMailServer()
	{
		return 'imap.gmail.com';
	}
            



  public function GetScope()
  {
    if (!empty($this->Get('advanced_scope'))) {
        return $this->Get('advanced_scope');
    }
    $aScopes = $this->Get('scope')->GetValues();
    $aRawScopes = [];
    foreach ($aScopes as $sScope) {
        switch ($sScope) {
            case 'SMTP':
                $aRawScopes['https://mail.google.com/'] = 'https://mail.google.com/';
                break;

            case 'IMAP':
                $aRawScopes['https://mail.google.com/'] = 'https://mail.google.com/';
                break;
        }
    }
    return implode(' ', $aRawScopes);
  }
            

}
//
// Menus
//
class MenuCreation_itop_oauth_client extends ModuleHandlerAPI
{
	public static function OnMenuCreation()
	{
		global $__comp_menus__; // ensure that the global variable is indeed global !
		$__comp_menus__['ConfigurationTools'] = new MenuGroup('ConfigurationTools', 90, 'fas fa-cog' , null, UR_ACTION_MODIFY, UR_ALLOWED_YES, null);
		$__comp_menus__['OAuthClient'] = new OQLMenuNode('OAuthClient', "SELECT OAuthClient", $__comp_menus__['ConfigurationTools']->GetIndex(), 100, true , 'OAuthClient', UR_ACTION_MODIFY, UR_ALLOWED_YES, null, true);
	}
} // class MenuCreation_itop_oauth_client
